<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHaoyi&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-14T02:14:14.656Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CHaoyi&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python爬取微博评论并存储到数据库（二）</title>
    <link href="http://yoursite.com/2017/11/14/weibo1/"/>
    <id>http://yoursite.com/2017/11/14/weibo1/</id>
    <published>2017-11-14T01:46:08.000Z</published>
    <updated>2017-11-14T02:14:14.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从数据库中取出爬到的评论数据并处理"><a href="#从数据库中取出爬到的评论数据并处理" class="headerlink" title="从数据库中取出爬到的评论数据并处理"></a>从数据库中取出爬到的评论数据并处理</h2><h3 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h3><p>从数据库中读取数据,取出前13000条评论<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readmysql</span><span class="params">()</span>:</span></div><div class="line">    commentlist = []</div><div class="line">    textlist = []</div><div class="line">    userlist = []</div><div class="line">    conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, db=<span class="string">'scrpay'</span>, passwd=<span class="string">'123456'</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    <span class="keyword">with</span> conn:</div><div class="line">        cur = conn.cursor()</div><div class="line">        cur.execute(<span class="string">'SELECT * FROM weibo WHERE id &lt; %d'</span> % <span class="number">13000</span>)</div><div class="line">        rows = cur.fetchall()<span class="comment">#取出数据</span></div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</div><div class="line">            row = list(row)<span class="comment">#将tuple转换为list进而修改</span></div><div class="line">            <span class="keyword">del</span> row[<span class="number">0</span>]</div><div class="line">            <span class="keyword">if</span> row <span class="keyword">not</span> <span class="keyword">in</span> commentlist:</div><div class="line">                commentlist.append(row)</div><div class="line">                comment_id = row[<span class="number">0</span>]</div><div class="line">                user_name = row[<span class="number">1</span>]</div><div class="line">                userlist.append(user_name)</div><div class="line">                created_at = row[<span class="number">2</span>]</div><div class="line">                text = row[<span class="number">3</span>]</div><div class="line">                textlist.append(text)</div><div class="line">                likenum = row[<span class="number">4</span>]</div><div class="line">                source = row[<span class="number">5</span>]</div><div class="line">                <span class="comment">#print comment_id.encode('utf-8'),user_name.encode('utf-8'),created_at.encode('utf-8'),text.encode('utf-8'),likenum.encode('utf-8'),source.encode('utf-8')</span></div><div class="line">    <span class="keyword">return</span> commentlist, textlist, userlist</div></pre></td></tr></table></figure></p><h3 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h3><p>用云词显示出现词汇的频率<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordtocloud</span><span class="params">(textlist)</span>:</span></div><div class="line">    fulltext=<span class="string">''</span></div><div class="line">    cloud = WordCloud(font_path=<span class="string">'font.ttf'</span>,</div><div class="line">            background_color=<span class="string">"white"</span>,  <span class="comment"># 背景颜色</span></div><div class="line">            max_words=<span class="number">2000</span>,  <span class="comment"># 词云显示的最大词数</span></div><div class="line">            <span class="comment">#mask=back_coloring,  # 设置背景图片</span></div><div class="line">            max_font_size=<span class="number">100</span>,  <span class="comment"># 字体最大值</span></div><div class="line">            random_state=<span class="number">42</span>,</div><div class="line">            width=<span class="number">1000</span>, height=<span class="number">860</span>, margin=<span class="number">2</span>,<span class="comment"># 设置图片默认的大小,但是如果使用背景图片的话,那么保存的图片大小将会按照其大小保存,margin为词语边缘距离</span></div><div class="line">            )</div><div class="line">    <span class="comment">#将数据放到文本中，使用jieba分词分出所有词汇</span></div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> textlist:</div><div class="line">        fulltext += <span class="string">' '</span>.join(jieba.cut(li,cut_all = <span class="keyword">False</span>))</div><div class="line">    wc = cloud.generate(fulltext)</div><div class="line">    <span class="comment">#image_colors = ImageColorGenerator(back_coloring)</span></div><div class="line">    plt.figure(<span class="string">"wordc"</span>)</div><div class="line">    plt.imshow(wc.recolor())</div><div class="line">    wc.to_file(<span class="string">'微博评论词云.png'</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从数据库中取出爬到的评论数据并处理&quot;&gt;&lt;a href=&quot;#从数据库中取出爬到的评论数据并处理&quot; class=&quot;headerlink&quot; title=&quot;从数据库中取出爬到的评论数据并处理&quot;&gt;&lt;/a&gt;从数据库中取出爬到的评论数据并处理&lt;/h2&gt;&lt;h3 id=&quot;取数据&quot;&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用python爬取微博评论并存储到数据库</title>
    <link href="http://yoursite.com/2017/11/13/weibo/"/>
    <id>http://yoursite.com/2017/11/13/weibo/</id>
    <published>2017-11-13T02:40:05.000Z</published>
    <updated>2017-11-13T03:05:08.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-对微博评论进行爬取"><a href="#python-对微博评论进行爬取" class="headerlink" title="python 对微博评论进行爬取"></a>python 对微博评论进行爬取</h2><h2 id="微博授权"><a href="#微博授权" class="headerlink" title="微博授权"></a>微博授权</h2><p>调用微博API进行登录，这是方法<a href="http://blog.csdn.net/gamer_gyt/article/details/51839159" target="_blank" rel="external">微博API登录授权</a></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="安装微博API"><a href="#安装微博API" class="headerlink" title="安装微博API"></a>安装微博API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install weibo</div></pre></td></tr></table></figure><h3 id="测试新建微博应用"><a href="#测试新建微博应用" class="headerlink" title="测试新建微博应用"></a>测试新建微博应用</h3><p>参考：<a href="http://blog.csdn.net/gamer_gyt/article/details/51839159" target="_blank" rel="external">微博API登录授权</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">App_key = <span class="string">'自己的'</span></div><div class="line">App_secret = <span class="string">'自己的'</span></div><div class="line">CALLBACK_URL = <span class="string">'https://api.weibo.com/oauth2/default.html'</span>  <span class="comment"># 回调链接</span></div><div class="line"></div><div class="line">client = APIClient(app_key=App_key, app_secret=App_secret, redirect_uri=CALLBACK_URL)</div><div class="line">url = client.get_authorize_url()</div><div class="line">webbrowser.open_new(url)</div></pre></td></tr></table></figure></p><p>微博授权，将返回一个code,在地址栏</p><p>输入code进行授权。此处可以自动化使用selenium进行自动点击获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">code = raw_input()</div><div class="line">r = client.request_access_token(code)</div><div class="line">access_token = r.access_token  <span class="comment"># 新浪返回的token，类似abc123xyz456</span></div><div class="line">expires_in = r.expires_in</div><div class="line">client.set_access_token(access_token, expires_in)</div></pre></td></tr></table></figure><p>根据单条微博ID抓取返回，使用移动端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">weibo_id = (<span class="string">'4154417035431509'</span>)  <span class="comment"># 单条微博ID</span></div><div class="line">url = <span class="string">'https://m.weibo.cn/api/comments/show?id='</span> + weibo_id + <span class="string">'&amp;page=&#123;&#125;'</span></div></pre></td></tr></table></figure></p><p>伪装headers<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Host'</span>: <span class="string">'m.weibo.cn'</span>,</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*;q=0.01'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.8'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'Referer'</span>: <span class="string">'https://m.weibo.cn/status/'</span> + weibo_id,</div><div class="line">    <span class="string">'Cookie'</span>: <span class="string">'ALF=1512569395; SCF=Am_oMeVmtKxusW2bqPM2Bq2tboM-dQhvoAfmoVm30hFM1YxnCOElOw4yQAduKN_s_57PdgmRBDzA-neEV88QH-U.; SUB=_2A253Bdc-DeRhGeNO6VMT8ybFwzuIHXVUCfl2rDV6PUJbktANLXPBkW1qA44VXJ9g04C0C9ZKqCcDhlEdcw..; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9Wh6Lb0JMxwuem5b4Kz02AcF5JpX5K-hUgL.Fo-7eo2Ee0n41hM2dJLoI7LhIs8awgLJ9g.t; SUHB=0YhhquN90t0cqa; SSOLoginState=1510057838; _T_WM=47eac210afab7501038eb13a03e0305b; H5:PWA:UID=1; __guid=52195957.3372748557967896000.1510057840112.0652; H5_INDEX=2; H5_INDEX_TITLE=Chaoyifei; M_WEIBOCN_PARAMS=featurecode%3D20000320%26oid%3D4160547165300149%26luicode%3D20000061%26lfid%3D4160547165300149; monitor_count=16'</span>,</div><div class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>登录并获取返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = requests.get(url=url.format(i), headers=headers)</div><div class="line">    comment_page = r.json()[<span class="string">'data'</span>]</div></pre></td></tr></table></figure></p><p>获取评论内容并过滤表情符号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">user = comment_page[j]</div><div class="line">                comment_id = user[<span class="string">'user'</span>][<span class="string">'id'</span>]</div><div class="line">                <span class="comment"># print comment_id</span></div><div class="line">                user_name = user[<span class="string">'user'</span>][<span class="string">'screen_name'</span>]</div><div class="line">                <span class="comment"># print (user_name)</span></div><div class="line">                created_at = user[<span class="string">'created_at'</span>]</div><div class="line">                <span class="comment"># print created_at</span></div><div class="line">                <span class="comment"># 屏蔽表情符</span></div><div class="line"></div><div class="line">                text = re.sub(<span class="string">'&lt;.*?&gt;|回复&lt;.*?&gt;:|[\U00010000-\U0010ffff]|[\uD800-\uDBFF][\uDC00-\uDFFF]'</span>, <span class="string">''</span>, user[<span class="string">'text'</span>])</div><div class="line">                <span class="comment"># print text</span></div><div class="line">                likenum = user[<span class="string">'like_counts'</span>]</div><div class="line">                <span class="comment"># print likenum</span></div><div class="line">                source = re.sub(<span class="string">'[\U00010000-\U0010ffff]|[\uD800-\uDBFF][\uDC00-\uDFFF]'</span>, <span class="string">''</span>, user[<span class="string">'source'</span>])</div></pre></td></tr></table></figure></p><p>插入到数据库(数据库已经建表)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">source = re.sub(<span class="string">'[\U00010000-\U0010ffff]|[\uD800-\uDBFF][\uDC00-\uDFFF]'</span>, <span class="string">''</span>, user[<span class="string">'source'</span>])</div><div class="line">                <span class="comment"># print source+'\r\n'</span></div><div class="line">                conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, db=<span class="string">'scrpay'</span>, passwd=<span class="string">'123456'</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">                cur = conn.cursor()</div><div class="line">                sql = <span class="string">"insert into weibo(comment_id,user_name,created_at,text,likenum,source) values(%s,%s,%s,%s,%s,%s)"</span></div><div class="line">                param = (comment_id, user_name, created_at, text, likenum, source)</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    A = cur.execute(sql, param)</div><div class="line">                    conn.commit()</div><div class="line">                    <span class="keyword">print</span> <span class="string">'成功'</span></div><div class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                    <span class="keyword">print</span> e</div><div class="line">                    <span class="keyword">print</span> <span class="string">'失败'</span></div><div class="line">                    conn.rollback()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-对微博评论进行爬取&quot;&gt;&lt;a href=&quot;#python-对微博评论进行爬取&quot; class=&quot;headerlink&quot; title=&quot;python 对微博评论进行爬取&quot;&gt;&lt;/a&gt;python 对微博评论进行爬取&lt;/h2&gt;&lt;h2 id=&quot;微博授权&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="pyhton" scheme="http://yoursite.com/tags/pyhton/"/>
    
  </entry>
  
  <entry>
    <title>wordcloud云词基本使用</title>
    <link href="http://yoursite.com/2017/11/12/wordcloud/"/>
    <id>http://yoursite.com/2017/11/12/wordcloud/</id>
    <published>2017-11-12T06:41:01.000Z</published>
    <updated>2017-11-13T02:45:22.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本挖掘-wordcloud、主题模型与文本分类"><a href="#文本挖掘-wordcloud、主题模型与文本分类" class="headerlink" title="文本挖掘-wordcloud、主题模型与文本分类"></a>文本挖掘-wordcloud、主题模型与文本分类</h2><p>分词、取词是关键和基础。图片毕竟只是一个可视化的展示手段，内容更重要。分词前要想清楚是否屏蔽某些词性（ jieba 提供这种功能，但是学习的还不透彻，以后可以专门记录一些分词的东西），分词以后也可以手动删除一些词语，使重点突出。</p><p>遮罩图片的选择很重要。首先需要是大面积白底，否则会整张图片铺满词语。其次，图片的颜色要丰富，最好能有渐变度，这样的配色会很舒服。但是符合条件的图片实在是太难找了…可遇而不可求。</p><p>最后，完美的图片需要很多次地微调参数。词语的数量，字体的大小等，都会对整张图片的效果和词云形状的拟合度产生影响。</p><p>这些只是对现有工具的简单学习应用，并没有什么创新与创造。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install wordcloud</div></pre></td></tr></table></figure><h2 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8  </span></div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path  </div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread  <span class="comment">#(scipy是基于numpy提供更强大的科学计算库)</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment">#（绘图库）</span></div><div class="line"><span class="keyword">import</span> jieba <span class="comment">#（分词库）</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator  <span class="comment">#STOPWORDS停词，去掉一些无意义的词比如（我，你，是等语气词）</span></div><div class="line"></div><div class="line">stopwords = &#123;&#125;  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">importStopword</span><span class="params">(filename=<span class="string">''</span>)</span>:</span>  </div><div class="line">    <span class="keyword">global</span> stopwords  </div><div class="line">    f = open(filename, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment">#（）</span></div><div class="line">    line = f.readline().rstrip()  </div><div class="line"></div><div class="line">    <span class="keyword">while</span> line:  </div><div class="line">        stopwords.setdefault(line, <span class="number">0</span>)  </div><div class="line">        stopwords[line] = <span class="number">1</span>  </div><div class="line">        line = f.readline().rstrip()  </div><div class="line"></div><div class="line">    f.close()  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processChinese</span><span class="params">(text)</span>:</span>  </div><div class="line">    seg_generator = jieba.cut(text)  <span class="comment"># 使用结巴分词，也可以不使用  </span></div><div class="line"></div><div class="line">    seg_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> seg_generator <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> stopwords]  </div><div class="line"></div><div class="line">    seg_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> seg_list <span class="keyword">if</span> i != <span class="string">u' '</span>]  </div><div class="line"></div><div class="line">    seg_list = <span class="string">r' '</span>.join(seg_list)  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> seg_list  </div><div class="line"></div><div class="line">importStopword(filename=<span class="string">'./stopwords.txt'</span>)  </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取当前文件路径  </span></div><div class="line"><span class="comment"># __file__ 为当前文件, 在ide中运行此行会报错,可改为  </span></div><div class="line"><span class="comment"># d = path.dirname('.')  </span></div><div class="line">d = path.dirname(__file__)  </div><div class="line"></div><div class="line"></div><div class="line">text = open(path.join(d, <span class="string">'love.txt'</span>),encoding =<span class="string">'utf-8'</span>).read()  </div><div class="line"></div><div class="line"><span class="comment">#如果是中文  </span></div><div class="line"><span class="comment">#text = processChinese(text)#中文不好分词，使用Jieba分词进行  </span></div><div class="line"></div><div class="line"><span class="comment"># read the mask / color image  </span></div><div class="line"><span class="comment"># taken from http://jirkavinse.deviantart.com/art/quot-Real-Life-quot-Alice-282261010  </span></div><div class="line"><span class="comment"># 设置背景图片  </span></div><div class="line">back_coloring = imread(path.join(d, <span class="string">"./image/love.jpg"</span>))  </div><div class="line"></div><div class="line">wc = WordCloud( font_path=<span class="string">'./font/cabin-sketch.bold.ttf'</span>,<span class="comment">#设置字体  </span></div><div class="line">                background_color=<span class="string">"black"</span>, <span class="comment">#背景颜色  </span></div><div class="line">                max_words=<span class="number">2000</span>,<span class="comment"># 词云显示的最大词数  </span></div><div class="line">                mask=back_coloring,<span class="comment">#设置背景图片  </span></div><div class="line">                max_font_size=<span class="number">100</span>, <span class="comment">#字体最大值  </span></div><div class="line">                random_state=<span class="number">42</span>,  </div><div class="line">                )  </div><div class="line"><span class="comment"># 生成词云, 可以用generate输入全部文本(中文不好分词),也可以我们计算好词频后使用generate_from_frequencies函数  </span></div><div class="line">wc.generate(text)  </div><div class="line"><span class="comment"># wc.generate_from_frequencies(txt_freq)  </span></div><div class="line"><span class="comment"># txt_freq例子为[('词a', 100),('词b', 90),('词c', 80)]  </span></div><div class="line"><span class="comment"># 从背景图片生成颜色值  </span></div><div class="line">image_colors = ImageColorGenerator(back_coloring)  </div><div class="line"></div><div class="line">plt.figure()  </div><div class="line"><span class="comment"># 以下代码显示图片  </span></div><div class="line">plt.imshow(wc)  </div><div class="line">plt.axis(<span class="string">"off"</span>)  </div><div class="line">plt.show()  </div><div class="line"><span class="comment"># 绘制词云  </span></div><div class="line"></div><div class="line"><span class="comment"># 保存图片  </span></div><div class="line">wc.to_file(path.join(d, <span class="string">"名称.png"</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文本挖掘-wordcloud、主题模型与文本分类&quot;&gt;&lt;a href=&quot;#文本挖掘-wordcloud、主题模型与文本分类&quot; class=&quot;headerlink&quot; title=&quot;文本挖掘-wordcloud、主题模型与文本分类&quot;&gt;&lt;/a&gt;文本挖掘-wordcloud
      
    
    </summary>
    
      <category term="库" scheme="http://yoursite.com/categories/%E5%BA%93/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>jieba分词</title>
    <link href="http://yoursite.com/2017/11/12/jieba/"/>
    <id>http://yoursite.com/2017/11/12/jieba/</id>
    <published>2017-11-12T05:59:35.000Z</published>
    <updated>2017-11-12T06:17:11.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jieba分词基本用法"><a href="#jieba分词基本用法" class="headerlink" title="jieba分词基本用法"></a>jieba分词基本用法</h3><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>支持三种分词模式：<ul><li>精确模式，试图将句子最精确地切开，适合文本分析；</li><li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li><li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li></ul></li><li>支持繁体分词</li><li>支持自定义词典<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2>*　jieba.cut 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</li><li>jieba.cut_for_search 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li><li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li><li>jieba.cut 以及 jieba.cut_for_search 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用jieba.lcut 以及 jieba.lcut_for_search 直接返回 list</li><li>jieba.Tokenizer(dictionary=DEFAULT_DICT) 新建自定义分词器，可用于同时使用不同词典。jieba.dt 为默认分词器，所有全局分词相关函数都是该分词器的映射。<br><br>示例：<br></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jieba</div><div class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="keyword">True</span>)</div><div class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></div><div class="line"></div><div class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="keyword">False</span>)</div><div class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></div><div class="line"></div><div class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></div><div class="line">print(<span class="string">", "</span>.join(seg_list))</div><div class="line"></div><div class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></div><div class="line">print(<span class="string">", "</span>.join(seg_list))</div></pre></td></tr></table></figure><p>输出:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</div><div class="line"></div><div class="line">【精确模式】: 我/ 来到/ 北京/ 清华大学</div><div class="line"></div><div class="line">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</div><div class="line"></div><div class="line">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jieba分词基本用法&quot;&gt;&lt;a href=&quot;#jieba分词基本用法&quot; class=&quot;headerlink&quot; title=&quot;jieba分词基本用法&quot;&gt;&lt;/a&gt;jieba分词基本用法&lt;/h3&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;head
      
    
    </summary>
    
      <category term="python,库" scheme="http://yoursite.com/categories/python-%E5%BA%93/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>mysql基本操作</title>
    <link href="http://yoursite.com/2017/11/10/mysql/"/>
    <id>http://yoursite.com/2017/11/10/mysql/</id>
    <published>2017-11-10T09:16:37.000Z</published>
    <updated>2017-11-10T15:51:54.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql基本操作"><a href="#mysql基本操作" class="headerlink" title="mysql基本操作"></a>mysql基本操作</h1><h2 id="对用户授权的操作"><a href="#对用户授权的操作" class="headerlink" title="对用户授权的操作"></a>对用户授权的操作</h2><p><strong>grant  权限  on  数据库名.表名 to 用户名@’可以访问的地址’ identified by “密码”</strong><br><br><strong>权限：  all  所有权限    usage 无权限   select,update,insert,delete，等权限</strong><br><br>数据库.表名： &emsp; *.* &emsp; 所有数据库的所有表<br><br>&emsp;&emsp; &emsp;&emsp;&emsp;&emsp; 数据库名.* &emsp;单个数据库的所有表<br><br>&emsp;&emsp; &emsp;&emsp;&emsp;&emsp;数据库名.表名 &emsp; 单个数据库的某个表<br><br>用户名： 授权的用户名<br><br>可以访问的地址：% 所有地址，但是localhost不能访问<br><br> &emsp;&emsp;&emsp;&emsp;localhost&emsp;  只有localhost可以访问<br>&emsp;&emsp;&emsp;&emsp;                             192.168.1.0/24&emsp; 可以访问网段地址<br><br>&emsp;&emsp;&emsp;&emsp;        192.168.1.1 &emsp;只能某个地址访问<br><br><br><br>flush privileges;  刷新授权</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>给bigdata用户授予在localhost登录，对mysql数据库进行create,select,update,insert,delete操作，但是不设置密码就可以登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant create,select,update,insert,delete on mysql.* to bigdata@&apos;localhost&apos;;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure><ul><li>登录数据库查看权限：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;show grants;</div></pre></td></tr></table></figure></li></ul></li><li><p>给bigdata用户授予从192.168.0.7的机器登陆，并有bigdatas数据库相应的权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant create,select,insert,update on bigdata.* to bigdata@&apos;192.168.0.7&apos; identified by &quot;bigdata&quot;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure><ul><li>客户端登录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h192.168.0.7 -uzhaoyun -pzhaoyun;</div></pre></td></tr></table></figure></li></ul></li><li><p>给用户授予可以把自己权限再授给其他人的权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant create on bigdta1 to zhaoyun@&apos;192.168.0.7&apos; identified by &quot;bigdta&quot; with grant option ;</div></pre></td></tr></table></figure></li><li><p>撤销权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; revoke create on bigdata.* from bigdata@&apos;192.168.0.7&apos; ;</div></pre></td></tr></table></figure></li></ul><h2 id="清空数据表"><a href="#清空数据表" class="headerlink" title="清空数据表"></a>清空数据表</h2><h3 id="清空数据表使id从1开始"><a href="#清空数据表使id从1开始" class="headerlink" title="清空数据表使id从1开始"></a>清空数据表使id从1开始</h3><p>truncate table 表名;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql基本操作&quot;&gt;&lt;a href=&quot;#mysql基本操作&quot; class=&quot;headerlink&quot; title=&quot;mysql基本操作&quot;&gt;&lt;/a&gt;mysql基本操作&lt;/h1&gt;&lt;h2 id=&quot;对用户授权的操作&quot;&gt;&lt;a href=&quot;#对用户授权的操作&quot; class=&quot;
      
    
    </summary>
    
      <category term="基础" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙</title>
    <link href="http://yoursite.com/2017/11/06/Linx-fireworld/"/>
    <id>http://yoursite.com/2017/11/06/Linx-fireworld/</id>
    <published>2017-11-06T07:30:17.000Z</published>
    <updated>2017-11-06T12:57:29.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux各系统防火墙设置"><a href="#Linux各系统防火墙设置" class="headerlink" title="Linux各系统防火墙设置"></a>Linux各系统防火墙设置</h1><h2 id="Centos-Redhat"><a href="#Centos-Redhat" class="headerlink" title="Centos,Redhat"></a>Centos,Redhat</h2><h3 id="Cnetos6-Redhat6"><a href="#Cnetos6-Redhat6" class="headerlink" title="Cnetos6,Redhat6"></a>Cnetos6,Redhat6</h3><ul><li><p>查看防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[linuxidc@localhost ~]$service iptable status</div></pre></td></tr></table></figure></li><li><p>关闭防火墙(临时关闭)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">servcie iptables stop</div></pre></td></tr></table></figure></li><li><p>永久关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig iptables off</div></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">servcie iptables start</div></pre></td></tr></table></figure></li><li><p>防火墙特定端口打开关闭</p><ul><li><p>方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</div><div class="line">/etc/init.d/iptables save</div><div class="line">service iptables restart</div></pre></td></tr></table></figure></li><li><p>方法二<br><br> vi /etc/sysconfig/iptables  打开配置文件加入如下语句:<br><br>-A INPUT -p tcp -m state –state NEW -m tcp –dport 80 -j ACCEPT   重启防火墙，修改完成。</p></li></ul></li><li><p>关闭特定端口：</p><ul><li>方法一：<br><br>/sbin/iptables -I INPUT -p tcp –dport 80 -j DROP   <br><br>/etc/init.d/iptables save   保存修改<br><br>service iptables restart    重启防火墙，修改生效</li><li><p>方法二：<br><br> vi /etc/sysconfig/iptables  打开配置文件加入如下语句:<br></p><p> -A INPUT -p tcp -m state –state NEW -m tcp –dport 80 -j DROP   重启防火墙，修改完成</p></li></ul></li><li>查看端口状况：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/iptables status</div></pre></td></tr></table></figure></li></ul><h3 id="Cnetos7-Redhat7"><a href="#Cnetos7-Redhat7" class="headerlink" title="Cnetos7,Redhat7"></a>Cnetos7,Redhat7</h3><ul><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl disable firewalld</div></pre></td></tr></table></figure></li><li><p>禁用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld</div></pre></td></tr></table></figure></li><li><p>状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure></li><li><p>开启端口 <br><br>firewall-cmd –zone=public –add-port=80/tcp –permanent    （–permanent永久生效，没有此参数重启后失效）</p></li><li><p>重新载入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone= public --query-port=80/tcp</div></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</div></pre></td></tr></table></figure></li><li><p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。<br><br>启动一个服务：systemctl start firewalld.service<br><br>关闭一个服务：systemctl stop firewalld.service<br><br>重启一个服务：systemctl restart firewalld.service<br><br>显示一个服务的状态：systemctl status firewalld.service<br><br>在开机时启用一个服务：systemctl enable firewalld.service<br><br>在开机时禁用一个服务：systemctl disable firewalld.service<br><br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br><br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br><br>查看启动失败的服务列表：systemctl –failed<br></p></li><li><p>配置firewalld-cmd<br><br>查看版本： firewall-cmd –version<br><br>查看帮助： firewall-cmd –help<br><br>显示状态： firewall-cmd –state<br><br>查看所有打开的端口： firewall-cmd –zone=public –list-ports<br><br>更新防火墙规则： firewall-cmd –reload<br><br>查看区域信息:  firewall-cmd –get-active-zones<br><br>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0<br><br>拒绝所有包：firewall-cmd –panic-on<br><br>取消拒绝状态： firewall-cmd –panic-off<br><br>查看是否拒绝： firewall-cmd –query-panic<br><br>##SUSE</p></li><li>SUSE防火墙查看命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">linux:~ # chkconfig -list|grep -i fire</div><div class="line">SuSEfirewall2_init        0:off 1:off 2:off 3:off 4:off 5:off 6:off</div><div class="line">SuSEfirewall2_setup       0:off 1:off 2:off 3:off 4:off 5:off 6:off</div></pre></td></tr></table></figure></li></ul><p>SUSE防火墙立即停止命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">linux:~ # SuSEfirewall2 stop</div><div class="line">SuSEfirewall2: Warning: ip6tables does not support state matching. Extended IPv6 support disabled.</div><div class="line">SuSEfirewall2: batch committing...</div><div class="line">SuSEfirewall2: Firewall rules unloaded.</div></pre></td></tr></table></figure></p><p>SUSE默认的防火墙设置为禁止所有外来联结。如果你想开放某个端口的话，就得修改防火墙设置开放这个端口。本文介绍了怎么修改SUSE的防火墙设置以开放某指定端口。<br>手动修改：</p><p>#vi /etc/sysconfig/SUSEfirewall2</p><p>#TCP端口的情况：<br>FW_SERVICES_EXT_TCP = “6000”</p><p>#UDP端口的情况：<br>FW_SERVICES_EXT_UDP = “177”<br>防火墙设置的生效：</p><p>#rcSUSEfirewall2 restart</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux各系统防火墙设置&quot;&gt;&lt;a href=&quot;#Linux各系统防火墙设置&quot; class=&quot;headerlink&quot; title=&quot;Linux各系统防火墙设置&quot;&gt;&lt;/a&gt;Linux各系统防火墙设置&lt;/h1&gt;&lt;h2 id=&quot;Centos-Redhat&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux firewalld" scheme="http://yoursite.com/tags/Linux-firewalld/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/2017/11/05/Markdown/"/>
    <id>http://yoursite.com/2017/11/05/Markdown/</id>
    <published>2017-11-05T04:41:52.000Z</published>
    <updated>2017-11-06T07:33:21.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/11/05/Markdown/markdown.jpg" alt=""></p><p>&emsp;&emsp;<strong>Markdown</strong> 是一种文本格式。你可以用它来控制文档的显示。使用 markdown，你可以创建粗体的文字，斜体的文字，添加图片，并且创建列表 等等。基本上来讲，Markdown 就是普通的文字加上 # 或者 * 等符号。</p><p> <strong><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/markdown-basics?id=%e4%bb%80%e4%b9%88%e6%98%af-markdown" target="_blank" rel="external">markdown</a></strong></p><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 这是 \&lt;h1&gt; 一级标题</div><div class="line">## 这是 \&lt;h2&gt; 二级标题</div><div class="line">### 这是 \&lt;h3&gt; 三级标题</div><div class="line">#### 这是 \&lt;h4&gt; 四级标题</div><div class="line">##### 这是 \&lt;h5&gt; 五级标题</div><div class="line">###### 这是 \&lt;h6&gt; 六级标题</div></pre></td></tr></table></figure><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><em>这会是 斜体 的文字</em><br><em>这会是 斜体 的文字</em></p><p><strong>这会是 粗体 的文字</strong><br><strong>这会是 粗体 的文字</strong></p><p><em>你也 **组合** 这些符号</em></p><p><del>这个文字将会被横线删除</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">*这会是 斜体 的文字*</div><div class="line">_这会是 斜体 的文字_</div><div class="line"></div><div class="line">**这会是 粗体 的文字**</div><div class="line">__这会是 粗体 的文字__</div><div class="line"></div><div class="line">_你也 \*\*组合** 这些符号_</div><div class="line"></div><div class="line">~~这个文字将会被横线删除~~</div></pre></td></tr></table></figure></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* Item 1</div><div class="line">* Item 2</div><div class="line">  * Item 2a</div><div class="line">  * Item 2b</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. Item 1</div><div class="line">1. Item 2</div><div class="line">1. Item 3</div><div class="line">   1. Item 3a</div><div class="line">   1. Item 3b</div><div class="line">## 添加图片</div><div class="line">![GitHub Logo](/images/logo.png)</div><div class="line">Format: ![Alt Text](url)</div></pre></td></tr></table></figure></li></ol></li></ol><p><img src="/images/logo.png" alt="GitHub Logo"><br>Format: <img src="/2017/11/05/Markdown/url" alt="Alt Text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## 链接</div><div class="line">http://github.com - 自动生成！</div><div class="line">[GitHub](http://github.com)</div></pre></td></tr></table></figure></p><p><a href="http://github.com" target="_blank" rel="external">http://github.com</a> - 自动生成！<br><a href="http://github.com" target="_blank" rel="external">GitHub</a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>正如 Kanye West 所说：</p><blockquote><p>We’re living the future so<br>the present is our past.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正如 Kanye West 所说：</div><div class="line">&gt; We&apos;re living the future so</div><div class="line">&gt; the present is our past.</div></pre></td></tr></table></figure></p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>如下，三个或者更多的</p><hr><p>连字符</p><hr><p>星号</p><hr><p>下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">连字符</div><div class="line"></div><div class="line">***</div><div class="line"></div><div class="line">星号</div><div class="line"></div><div class="line">___</div><div class="line"></div><div class="line">下划线</div></pre></td></tr></table></figure></p><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>我觉得你应该在这里使用<br><code>&lt;addr&gt;</code> 才对。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我觉得你应该在这里使用</div><div class="line">`&lt;addr&gt;` 才对。</div></pre></td></tr></table></figure></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>你可以在你的代码上面和下面添加 <figure class="highlight plain"><figcaption><span>来表示代码块。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">你可以在你的代码上面和下面添加 ``` 来表示代码块。</div></pre></td></tr></table></figure></p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>你可以给你的代码块添加任何一种语言的语法高亮</p><p>例如，给 ruby 代码添加语法高亮：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></div><div class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</div><div class="line">puts markdown.to_html</div></pre></td></tr></table></figure><p>markdown表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">```ruby</div><div class="line">require &apos;redcarpet&apos;</div><div class="line">markdown = Redcarpet.new(&quot;Hello World!&quot;)</div><div class="line">puts markdown.to_html</div></pre></td></tr></table></figure></p><h2 id="代码块-class（MPE-扩展的特性）"><a href="#代码块-class（MPE-扩展的特性）" class="headerlink" title="代码块 class（MPE 扩展的特性）"></a>代码块 class（MPE 扩展的特性）</h2><p>你可以给你的代码块设置 class。</p><p>例如，添加 class1 class2 到一个 代码块：</p><figure class="highlight javascript"><figcaption><span>&#123;.class1 .class&#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>markdownb表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">你可以给你的代码块设置 class。</div><div class="line"></div><div class="line">例如，添加 class1 class2 到一个 代码块：</div><div class="line"></div><div class="line">```javascript &#123;.class1 .class&#125;</div><div class="line">function add(x, y) &#123;</div><div class="line">  return x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="代码行数"><a href="#代码行数" class="headerlink" title="代码行数"></a>代码行数</h2><p>如果你想要你的代码块显示代码行数，只要添加 line-numbers class 就可以了。</p><p>例如：</p><figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>markdown表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">```javascript &#123;.line-numbers&#125;</div><div class="line">function add(x, y) &#123;</div><div class="line">  return x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2017/11/05/Markdown/markdown.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;Markdown&lt;/strong&gt; 是一种文本格式。你可以用它来控制文档的显示。使用 markdown，你可以创建
      
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown hexo" scheme="http://yoursite.com/tags/markdown-hexo/"/>
    
  </entry>
  
</feed>
